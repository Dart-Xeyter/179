struct Node{
    int x;
    Node *l, *r;
    int d;

    Node(int x1): x(x1), l(nullptr), r(nullptr), d(1){}
};

void update(Node* tree){
    if (tree == nullptr){
        return;
    }
    tree->d = (tree->r != nullptr ? tree->r->d+1 : 1);
}

Node* merge(Node* tree1, Node* tree2){
    if (tree1 == nullptr){
        return tree2;
    }
    if (tree2 == nullptr){
        return tree1;
    }
    if (tree1->x > tree2->x){
        swap(tree1, tree2);
    }
    Node* vertex = new Node(tree1->x);
    vertex->l = tree1->l, vertex->r = merge(tree1->r, tree2);
    int len1 = (vertex->l != nullptr ? vertex->l->d : 0), len2 = (vertex->r != nullptr ? vertex->r->d : 0);
    if (len1 < len2){
        swap(vertex->l, vertex->r);
    }
    update(vertex);
    return vertex;
}
